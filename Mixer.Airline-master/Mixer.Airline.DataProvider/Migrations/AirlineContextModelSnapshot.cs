// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Airline.DataProvider;

namespace Airline.DataProvider.Migrations
{
    [DbContext(typeof(AirlineContext))]
    partial class AirlineContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Airline.DataProvider.Entities.Aircraft", b =>
                {
                    b.Property<string>("AircraftCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5);

                    b.Property<string>("Model")
                        .HasMaxLength(20);

                    b.Property<int>("TotalPlaces");

                    b.HasKey("AircraftCode");

                    b.ToTable("Aircrafts");
                });

            modelBuilder.Entity("Airline.DataProvider.Entities.Airport", b =>
                {
                    b.Property<string>("AirportCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("AirportCode");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("Airline.DataProvider.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<DateTime>("BookingDateTime");

                    b.Property<int>("FlightId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("PassengerId");

                    b.Property<int>("Price");

                    b.HasKey("BookingId");

                    b.HasIndex("FlightId");

                    b.HasIndex("PassengerId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Airline.DataProvider.Entities.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AircraftCode")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("ArrivalAirport")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<DateTime>("ArrivalDateTime");

                    b.Property<string>("DepartureAirport")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<DateTime>("DepartureDateTime");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<int>("Price");

                    b.Property<int>("TotalPlaces");

                    b.HasKey("FlightId");

                    b.HasIndex("AircraftCode");

                    b.HasIndex("ArrivalAirport");

                    b.HasIndex("DepartureAirport");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Airline.DataProvider.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<int>("PassengerId");

                    b.HasKey("NotificationId");

                    b.HasIndex("PassengerId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Airline.DataProvider.Entities.Passenger", b =>
                {
                    b.Property<int>("PassengerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<byte[]>("ProfileImage");

                    b.Property<string>("Role");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("PassengerId");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("Airline.DataProvider.Entities.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuyerId");

                    b.Property<int>("FlightId");

                    b.Property<string>("Name");

                    b.Property<string>("Passport");

                    b.Property<string>("Surname");

                    b.HasKey("TicketId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("FlightId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Airline.DataProvider.Entities.Booking", b =>
                {
                    b.HasOne("Airline.DataProvider.Entities.Flight", "Flight")
                        .WithMany("Bookings")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Airline.DataProvider.Entities.Passenger", "Passenger")
                        .WithMany("Bookings")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Airline.DataProvider.Entities.Flight", b =>
                {
                    b.HasOne("Airline.DataProvider.Entities.Aircraft", "Aircraft")
                        .WithMany("Flights")
                        .HasForeignKey("AircraftCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Airline.DataProvider.Entities.Airport", "ArrAirport")
                        .WithMany("Flights1")
                        .HasForeignKey("ArrivalAirport")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Airline.DataProvider.Entities.Airport", "DepAirport")
                        .WithMany("Flights2")
                        .HasForeignKey("DepartureAirport")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Airline.DataProvider.Entities.Notification", b =>
                {
                    b.HasOne("Airline.DataProvider.Entities.Passenger", "Passenger")
                        .WithMany("Notifications")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Airline.DataProvider.Entities.Ticket", b =>
                {
                    b.HasOne("Airline.DataProvider.Entities.Passenger", "Buyer")
                        .WithMany("Tickets")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Airline.DataProvider.Entities.Flight", "Flight")
                        .WithMany("Tickets")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
